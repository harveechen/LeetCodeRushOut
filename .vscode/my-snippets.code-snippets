{
	// Place your OJ 工作区 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"start code block": {
		"scope": "cpp",
		"prefix": "oj",
		"body": [
			"#include <unordered_map>",
			"#include <unordered_set>",
			"#include <map>",
			"#include <set>",
			"#include <queue>",
			"#include <stack>",
			"#include <vector>",
			"#include <iostream>",
			"#include <algorithm>",
			"#include <string>",
			"#include <limits.h>",
			"#include <extra/utils.hpp>",
			"",
			"using namespace std;",
			"",
			"class Solution {",
			"public:",
			"\t$1",
			"};",
			"",
			"int main()",
			"{",
			"\tstring line;",
			"\twhile (getline(cin, line))",
			"\t{",
			"\t\t$2",
			"\t}",
			"\treturn 0;",
			"}",
		],
		"description": "Leetcode style setup"
	},
	"start code block function style": {
		"scope": "cpp",
		"prefix": "foj",
		"body": [
			"#include <unordered_map>",
			"#include <unordered_set>",
			"#include <map>",
			"#include <set>",
			"#include <queue>",
			"#include <stack>",
			"#include <vector>",
			"#include <iostream>",
			"#include <algorithm>",
			"#include <string>",
			"#include <limits.h>",
			"",
			"using namespace std;",
			"",
			"$1",
			"",
			"int main()",
			"{",
			"\tstring line;",
			"\twhile (getline(cin, line))",
			"\t{",
			"\t\t$2",
			"\t}",
			"\treturn 0;",
			"}",
		],
		"description": "function coding style"
	},
	"segment tree": {
		"scope": "cpp",
		"prefix": "seg",
		"body": [
			"void build(int s, int t, int p) {",
			"\tif (s == t) {",
			"\t\td[p] = a[s];",
			"\t\treturn;",
			"\t}",
			"\tint m = s + ((s - t) >> 1);",
			"\tbuild(s, m, p*2);",
			"\tbuild(m+1, t, p*2+1);",
			"\td[p] = d[p*2] + d[p*2+1];",
			"}"
		]
	}
}